#!/usr/bin/python3
#	pdfminify - Tool to minify PDF files.
#	Copyright (C) 2016-2016 Johannes Bauer
#
#	This file is part of pdfminify.
#
#	pdfminify is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pdfminify is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pdfminify; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>
#

import sys
import os
import logging
import llpdf
from FriendlyArgumentParser import FriendlyArgumentParser
from FilesizeFormatter import FilesizeFormatter

def _cropbox(text):
	text = text.split(",")
	assert(len(text) == 4)
	return [ float(value) for value in text ]

parser = FriendlyArgumentParser()
parser.add_argument("--target-dpi", metavar = "dpi", type = int, default = 150, help = "Default resoulution to which images will be resampled at. Defaults to %(default)s dots per inch (dpi).")
parser.add_argument("--jpeg-images", action = "store_true", help = "Convert images to JPEGs.")
parser.add_argument("--jpeg-quality", metavar = "percent", type = int, default = 85, help = "When converting images to JPEG, gives the compression quality from 0-100 (higher is better, but also larger).")
parser.add_argument("--one-bit-alpha", action = "store_true", help = "Force all alpha channels in images to use one-bit depth. This will make transparent images have rougher edges, but may save additional space.")
parser.add_argument("--cropbox", metavar = "box", type = _cropbox, help = "Additionally add a /CropBox to all pages of the PDF file. Must be given in the format x,y,w,h.")
parser.add_argument("--unit", choices = llpdf.Measurements.list_units(), default = "native", help = "Specify the unit that is used for command line processing. Can be any of %(choices)s, defaults to %(default)s.")
parser.add_argument("--saveimgdir", metavar = "path", type = str, help = "When specified, save all handled images as individual files into the specified directory. Useful for debugging purposes and image extraction.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Show verbose messages during conversation. Can be specified multiple times to increase log level.")
parser.add_argument("infile", metavar = "pdf_in", type = str, help = "Input PDF file.")
parser.add_argument("outfile", metavar = "pdf_out", type = str, help = "Output PDF file.")
args = parser.parse_args(sys.argv[1:])

llpdf.configure_logging(args.verbose)

pdf_filter_classes = [
	llpdf.filters.RemoveDuplicateImageOptimization,
	llpdf.filters.DownscaleImageOptimization,
	llpdf.filters.AddCropBoxFilter,
]

log = logging.getLogger("llpdf")

fsf = FilesizeFormatter()
old_size = os.stat(args.infile).st_size
with open(args.infile, "rb") as infile, open(args.outfile, "wb") as outfile:
	pdf = llpdf.PDFFile(infile)

	for pdf_filter_class in pdf_filter_classes:
		log.debug("Running filter: %s", pdf_filter_class.__name__)
		pdf_filter = pdf_filter_class(pdf, args)
		pdf_filter.run()
		if args.verbose:
			log.debug("%s saved %s." % (pdf_filter_class.__name__, fsf(pdf_filter.bytes_saved)))

	writer = llpdf.PDFWriter(pdf, outfile)
	writer.write()
new_size = os.stat(args.outfile).st_size
if args.verbose:
	percent = 100 * new_size / old_size
	saved = old_size - new_size
	log.info("File size %s -> %s (%.0f%%, %s saved)" % (fsf(old_size), fsf(new_size), percent, fsf(saved)))

